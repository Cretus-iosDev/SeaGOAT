{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p> SeaGOAT </p> <p>A code search engine for the AI age. SeaGOAT leverages vector embeddings to enable to search your codebase semantically.</p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#install-seagoat","title":"Install SeaGOAT","text":"<p>In order to install SeaGOAT, you need to have the following dependencies already installed on your computer:</p> <ul> <li>Python 3.11 or newer</li> <li>ripgrep</li> </ul> <p>To install SeaGOAT using <code>pipx</code>, use the following command:</p> <pre><code>pipx install seagoat\n</code></pre>"},{"location":"#start-seagoat-server","title":"Start SeaGOAT server","text":"<p>In order to use SeaGOAT in your project, you have to start the SeaGOAT server using the following command:</p> <pre><code>seagoat-server start /path/to/your/repo\n</code></pre>"},{"location":"#search-your-repository","title":"Search your repository","text":"<p>If you have the server running, you can simply use the <code>gt</code> or <code>seagoat</code> command to query your repository. For example:</p> <pre><code>gt \"Where are the numbers rounded\"\n</code></pre> <p>You can also use Regular Expressions in your queries, for example</p> <pre><code>gt \"function calc_.* that deals with taxes\"\n</code></pre>"},{"location":"#stopping-the-server","title":"Stopping the server","text":"<p>You can stop the running server using the following command:</p> <pre><code>seagoat-server stop /path/to/your/repo\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Requirements:</p> <ul> <li>Poetry</li> <li>Python 3.11 or newer</li> <li>ripgrep</li> </ul>"},{"location":"#install-dependencies","title":"Install dependencies","text":"<p>After cloning the repository, install dependencies using the following command:</p> <pre><code>poetry install\n</code></pre>"},{"location":"#running-tests","title":"Running tests","text":""},{"location":"#watch-mode-recommended","title":"Watch mode (recommended)","text":"<pre><code>poetry run ptw\n</code></pre>"},{"location":"#test-changed-files","title":"Test changed files","text":"<pre><code>poetry run pytest .  --testmon\n</code></pre>"},{"location":"#test-all-files","title":"Test all files","text":"<pre><code>poetry run pytest .\n</code></pre>"},{"location":"#manual-testing","title":"Manual testing","text":"<p>You can test any SeaGOAT command manually in your local development environment. For example to test the development version of the <code>seagoat-server</code> command, you can run:</p> <pre><code>poetry run seagoat-server ~/path/an/example/repository\n</code></pre>"},{"location":"server/","title":"SeaGOAT Server","text":""},{"location":"server/#seagoat-server","title":"SeaGOAT-server","text":"<p>The seagoat-server is an integral component of the Seagoat command-line tool designed to analyze your codebase and create vector embeddings for it.</p> <p>While it serves as a backend for the command-line tool, also allows you to use it through HTTP to build your own SeaGOAT-based applications.</p>"},{"location":"server/#starting-the-server","title":"Starting the server","text":"<p>To boot up the server for a specific repository, use:</p> <pre><code>seagoat-server start &lt;repo_path&gt; [--port=&lt;custom_port&gt;]\n</code></pre> <ul> <li><code>repo_path</code>: Path to your Git repository</li> <li><code>--port</code>: (Optional) Run the server on a specific port</li> </ul> <p>If you don't specify a custom port, a random port will be assigned to your server. Don't worry, SeaGOAT will still be able to automatically find the server corresponding to a specific repository.</p>"},{"location":"usage/","title":"Usage Reference","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>SeaGOAT is a command-line tool designed to assist in querying your codebase. By using technologies such as ChromaDB and ripgrep, it goes beyond direct match searches and uses semantic meaning to quickly find details related to your query.</p> <p>Only works with Git</p> <p>SeaGOAT takes your Git history into account in order to provide the most useful and relevant results.</p>"},{"location":"usage/#command-usage","title":"Command Usage","text":"<pre><code>seagoat &lt;query&gt; [repo_path] [OPTIONS]\n</code></pre> <p>Note</p> <p>The seagoat CLI queries the SeaGOAT server. If the server is not running, you would be prompted to start the server using <code>seagoat-server start {repo_path} command</code>.</p>"},{"location":"usage/#arguments","title":"Arguments","text":"<ul> <li><code>query</code>: This is a required argument. It is the query to be made to the SeaGOAT server.</li> <li><code>repo_path</code>: This argument is optional, and defaults to the current working directory. It represents the path to the code repository.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#query-current-folder","title":"Query current folder","text":"<pre><code>seagoat \"myQuery\"\n</code></pre>"},{"location":"usage/#query-specific-folder","title":"Query specific folder","text":"<pre><code>seagoat \"myQuery\" \"/path/to/my/repo\"\n</code></pre>"},{"location":"usage/#using-regular-expressions","title":"Using Regular Expressions","text":"<p>One of SeaGOAT's most powerful features is the ability to combine regular expressions with AI-driven vector queries. This synergistic approach narrows down your codebase search using pattern-based regular expressions while leveraging AI to understand the semantic meaning behind your query.</p> <pre><code>seagoat \"function db_.* that initializes database\"\n</code></pre>"},{"location":"usage/#options","title":"Options","text":""},{"location":"usage/#-no-color-disable-syntax-highlighting","title":"<code>--no-color</code>: Disable syntax highlighting","text":"<p>This is automatically enabled when used as part of a bash pipeline.</p> Example<pre><code>seagoat \"myQuery\" --no-color\n</code></pre>"},{"location":"usage/#-l-max-results-limit-number-of-results","title":"<code>-l, --max-results</code>: Limit number of results","text":"<p>This limits the number of result lines displayed. Useful if you only care about the best results.</p> Example<pre><code>seagoat \"myQuery\" --max-results=5\n</code></pre> <p>Note that the line number limit is only applied to actual result lines. If you include context lines, those lines will not be counted as part of the limit and will be displayed regardless. When the last last result line of the last result file is displayed, all following context lines until the next result line (or the end of the file) are displayed.</p>"},{"location":"usage/#-version-print-version-number","title":"<code>--version</code>: Print version number","text":"<p>This prints the version of your current SeaGOAT installation.</p>"},{"location":"usage/#-b-context-above-lines-of-context-before-each-result","title":"<code>-B, --context-above</code>: Lines of context before each result","text":"<p>This option allows you to include a specified number of lines of context before each matching result.</p> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p> Example<pre><code>seagoat \"myQuery\" --context-above=5\n</code></pre>"},{"location":"usage/#-a-context-below-lines-of-context-after-each-result","title":"<code>-A, --context-below</code>: Lines of context after each result","text":"<p>This option allows you to include a specified number of lines of context after each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context-below=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"},{"location":"usage/#-c-context-lines-of-context-both-before-and-after-each-result","title":"<code>-C, --context</code>: Lines of context both before and after each result","text":"<p>This option sets both <code>--context-above</code> and <code>--context-below</code> to the same specified value. This is useful if you want an equal amount of context around each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"}]}