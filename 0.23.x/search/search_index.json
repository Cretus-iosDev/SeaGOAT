{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p> SeaGOAT </p> <p>A code search engine for the AI age. SeaGOAT is a local search tool that leverages vector embeddings to enable to search your codebase semantically.</p> <p> </p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#install-seagoat","title":"Install SeaGOAT","text":"<p>In order to install SeaGOAT, you need to have the following dependencies already installed on your computer:</p> <ul> <li>Python 3.11 or newer</li> <li>ripgrep</li> <li>https://github.com/sharkdp/bat (optional, highly recommended)</li> </ul> <p>When <code>bat</code> is installed, it is used to display results as long as color is enabled. When SeaGOAT is used as part of a pipeline, a grep-line output format is used. When color is enabled, but <code>bat</code> is not installed, SeaGOAT will highlight the output using pygments. Using <code>bat</code> is recommended.</p> <p>To install SeaGOAT using <code>pipx</code>, use the following command:</p> <pre><code>pipx install seagoat\n</code></pre>"},{"location":"#system-requirements","title":"System requirements","text":""},{"location":"#hardware","title":"Hardware","text":"<p>Should work on any decent laptop.</p>"},{"location":"#oporating-system","title":"Oporating system","text":"<p>SeaGOAT is designed to work on Linux (tested \u2705), macOS (partly tested, help \ud83d\ude4f) and Windows (help needed \ud83d\ude4f).</p>"},{"location":"#start-seagoat-server","title":"Start SeaGOAT server","text":"<p>In order to use SeaGOAT in your project, you have to start the SeaGOAT server using the following command:</p> <pre><code>seagoat-server start /path/to/your/repo\n</code></pre>"},{"location":"#search-your-repository","title":"Search your repository","text":"<p>If you have the server running, you can simply use the <code>gt</code> or <code>seagoat</code> command to query your repository. For example:</p> <pre><code>gt \"Where are the numbers rounded\"\n</code></pre> <p>You can also use Regular Expressions in your queries, for example</p> <pre><code>gt \"function calc_.* that deals with taxes\"\n</code></pre>"},{"location":"#stopping-the-server","title":"Stopping the server","text":"<p>You can stop the running server using the following command:</p> <pre><code>seagoat-server stop /path/to/your/repo\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Requirements:</p> <ul> <li>Poetry</li> <li>Python 3.11 or newer</li> <li>ripgrep</li> </ul>"},{"location":"#install-dependencies","title":"Install dependencies","text":"<p>After cloning the repository, install dependencies using the following command:</p> <pre><code>poetry install\n</code></pre>"},{"location":"#running-tests","title":"Running tests","text":""},{"location":"#watch-mode-recommended","title":"Watch mode (recommended)","text":"<pre><code>poetry run ptw\n</code></pre>"},{"location":"#test-changed-files","title":"Test changed files","text":"<pre><code>poetry run pytest .  --testmon\n</code></pre>"},{"location":"#test-all-files","title":"Test all files","text":"<pre><code>poetry run pytest .\n</code></pre>"},{"location":"#manual-testing","title":"Manual testing","text":"<p>You can test any SeaGOAT command manually in your local development environment. For example to test the development version of the <code>seagoat-server</code> command, you can run:</p> <pre><code>poetry run seagoat-server ~/path/an/example/repository\n</code></pre>"},{"location":"#faq","title":"FAQ","text":"<p>The points in this FAQ are indications of how SeaGOAT works, but are not a legal contract. SeaGOAT is licensed under an open source license and if you are in doubt about the privacy/safety/etc implications of SeaGOAT, you are welcome to examine the source code, raise your concerns, or create a pull request to fix a problem.</p>"},{"location":"#how-does-seagoat-work-does-it-send-my-data-to-chatgpt","title":"How does SeaGOAT work? Does it send my data to ChatGPT?","text":"<p>SeaGOAT does not rely on 3rd party APIs or any remote APIs and executes all functionality locally using the SeaGOAT server that you are able to run on your own machine.</p> <p>Instead of relying on APIs or \"connecting to ChatGPT\", it uses the vector database called ChromaDB, with a local vector embedding engine and telemetry disabled by default.</p> <p>Apart from that, SeaGOAT also uses ripgrep, a regular-expression based code search engine in order to provider regular expression/keyword based matches in addition to the \"AI-based\" matches.</p> <p>While the current version of SeaGOAT does not send your data to remote servers, it might be possible that in the future there will be optional features that do so, if any further improvement can be gained from that.</p>"},{"location":"#why-does-seagoat-need-a-server","title":"Why does SeaGOAT need a server?","text":"<p>SeaGOAT needs a server in order to provide a speedy response. SeaGOAT heavily relies on vector embeddings and vector databases, which at the moment cannot be replace with an architecture that processes files on the fly.</p> <p>It's worth noting that you are able to run SeaGOAT server entirely locally, and it works even if you don't have an internet connection. This use case does not require you to share data with a remote server, you are able to use your own SeaGOAT server locally, albeit it's also possible to run a SeaGOAT server and allow other computers to connect to it, if you so wish.</p>"},{"location":"#does-seagoat-create-ai-derived-work-is-seagoat-ethical","title":"Does SeaGOAT create AI-derived work? Is SeaGOAT ethical?","text":"<p>If you are concerned about the ethical implications of using AI tools keep in mind that SeaGOAT is not a code generator but a code search engine, therefore it does not create AI derived work.</p> <p>That being said, a language model is being used to generate vector embeddings. At the moment SeaGOAT uses ChromaDB's default model for calculating vector embeddings, and I am not aware of this being an ethical concern.</p>"},{"location":"server/","title":"SeaGOAT Server","text":""},{"location":"server/#seagoat-server","title":"SeaGOAT-server","text":"<p>The seagoat-server is an integral component of the Seagoat command-line tool designed to analyze your codebase and create vector embeddings for it.</p> <p>While it serves as a backend for the command-line tool, also allows you to use it through HTTP to build your own SeaGOAT-based applications.</p>"},{"location":"server/#starting-the-server","title":"Starting the server","text":"<p>To boot up the server for a specific repository, use:</p> <pre><code>seagoat-server start &lt;repo_path&gt; [--port=&lt;custom_port&gt;]\n</code></pre> <ul> <li><code>repo_path</code>: Path to your Git repository</li> <li><code>--port</code>: (Optional) Run the server on a specific port</li> </ul> <p>If you don't specify a custom port, a random port will be assigned to your server. Don't worry, SeaGOAT will still be able to automatically find the server corresponding to a specific repository.</p>"},{"location":"usage/","title":"Usage Reference","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>SeaGOAT is a command-line tool designed to assist in querying your codebase. By using technologies such as ChromaDB and ripgrep, it goes beyond direct match searches and uses semantic meaning to quickly find details related to your query.</p> <p>Only works with Git</p> <p>SeaGOAT takes your Git history into account in order to provide the most useful and relevant results.</p>"},{"location":"usage/#command-usage","title":"Command Usage","text":"<pre><code>seagoat &lt;query&gt; [repo_path] [OPTIONS]\n</code></pre> <p>Note</p> <p>The seagoat CLI queries the SeaGOAT server. If the server is not running, you would be prompted to start the server using <code>seagoat-server start {repo_path} command</code>.</p>"},{"location":"usage/#arguments","title":"Arguments","text":"<ul> <li><code>query</code>: This is a required argument. It is the query to be made to the SeaGOAT server.</li> <li><code>repo_path</code>: This argument is optional, and defaults to the current working directory. It represents the path to the code repository.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#query-current-folder","title":"Query current folder","text":"<pre><code>seagoat \"myQuery\"\n</code></pre>"},{"location":"usage/#query-specific-folder","title":"Query specific folder","text":"<pre><code>seagoat \"myQuery\" \"/path/to/my/repo\"\n</code></pre>"},{"location":"usage/#using-regular-expressions","title":"Using Regular Expressions","text":"<p>One of SeaGOAT's most powerful features is the ability to combine regular expressions with AI-driven vector queries. This synergistic approach narrows down your codebase search using pattern-based regular expressions while leveraging AI to understand the semantic meaning behind your query.</p> <pre><code>seagoat \"function db_.* that initializes database\"\n</code></pre>"},{"location":"usage/#options","title":"Options","text":""},{"location":"usage/#-no-color-disable-syntax-highlighting","title":"<code>--no-color</code>: Disable syntax highlighting","text":"<p>This is automatically enabled when used as part of a bash pipeline.</p> Example<pre><code>seagoat \"myQuery\" --no-color\n</code></pre>"},{"location":"usage/#-l-max-results-limit-number-of-result-lines","title":"<code>-l, --max-results</code>: Limit number of result lines","text":"<p>This limits the number of result lines displayed. Useful if you only care about the best results.</p> Example<pre><code>seagoat \"myQuery\" --max-results=5\n</code></pre> <p>SeaGOAT is oriented around code blocks, not individual lines</p> <p>In SeaGOAT, code is displayed in full, continous blocks rather than individual lines. It'll always show at least one full block, even if your limit is 0.</p> <p>If you set a limit, SeaGOAT ensures that complete blocks are shown as long as they fit in your limit. For example, with a 5-line limit, it can show a 3-line and a 2-line block, but not two 3-line blocks.</p> <p>Also, this limit only counts the actual code, not any extra context lines you might request.</p>"},{"location":"usage/#-version-print-version-number","title":"<code>--version</code>: Print version number","text":"<p>This prints the version of your current SeaGOAT installation.</p>"},{"location":"usage/#-b-context-above-lines-of-context-before-each-result","title":"<code>-B, --context-above</code>: Lines of context before each result","text":"<p>This option allows you to include a specified number of lines of context before each matching result.</p> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p> Example<pre><code>seagoat \"myQuery\" --context-above=5\n</code></pre>"},{"location":"usage/#-a-context-below-lines-of-context-after-each-result","title":"<code>-A, --context-below</code>: Lines of context after each result","text":"<p>This option allows you to include a specified number of lines of context after each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context-below=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"},{"location":"usage/#-c-context-lines-of-context-both-before-and-after-each-result","title":"<code>-C, --context</code>: Lines of context both before and after each result","text":"<p>This option sets both <code>--context-above</code> and <code>--context-below</code> to the same specified value. This is useful if you want an equal amount of context around each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"}]}